package rdns

import (
	"testing"

	"github.com/sapslaj/zonepop/endpoint"
	"github.com/stretchr/testify/assert"
)

func TestRFC1035DomainName(t *testing.T) {
	t.Parallel()

	tests := map[string]struct {
		ptr    string
		zone   string
		expect string
	}{
		"trimmed domain name": {
			ptr:    "20.4.18.198.in-addr.arpa.",
			zone:   "198.in-addr.arpa.",
			expect: "20.4.18",
		},
		"root": {
			ptr:    "20.4.18.198.in-addr.arpa.",
			zone:   "20.4.18.198.in-addr.arpa.",
			expect: "@",
		},
	}

	for name, tc := range tests {
		tc := tc
		t.Run(name, func(t *testing.T) {
			t.Parallel()

			got := RFC1035DomainName(tc.ptr, tc.zone)
			assert.Equal(t, tc.expect, got)
		})
	}
}

func TestPTRsForEndpoints(t *testing.T) {
	t.Parallel()

	tests := map[string]struct {
		endpoints []*endpoint.Endpoint
		config    Config
		expect    []PTRRecord
	}{
		"all ptrs": {
			endpoints: []*endpoint.Endpoint{
				{
					Hostname:  "test-host",
					IPv4s:     []string{"192.0.2.1"},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
			},
			expect: []PTRRecord{
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "test-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "test-host",
					AutoGeneratedHostname: false,
					FullHostname:          "test-host",
					Address:               "192.0.2.1",
					AddressKind:           AddressKindIPv4,
					DomainName:            "1.2.0.192.in-addr.arpa.",
					RFC1035DomainName:     "1.2.0.192.in-addr.arpa.",
				},
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "test-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "test-host",
					AutoGeneratedHostname: false,
					FullHostname:          "test-host",
					Address:               "2001:db8::1",
					AddressKind:           AddressKindIPv6,
					DomainName:            "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
					RFC1035DomainName:     "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
				},
			},
		},
		"specified IPv4 zone": {
			endpoints: []*endpoint.Endpoint{
				{
					Hostname:  "test-host",
					IPv4s:     []string{"192.0.2.1"},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
			},
			config: Config{
				Zone: "192.in-addr.arpa.",
			},
			expect: []PTRRecord{
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "test-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "test-host",
					AutoGeneratedHostname: false,
					FullHostname:          "test-host",
					Address:               "192.0.2.1",
					AddressKind:           AddressKindIPv4,
					DomainName:            "1.2.0.192.in-addr.arpa.",
					RFC1035DomainName:     "1.2.0",
				},
			},
		},
		"specified IPv6 zone": {
			endpoints: []*endpoint.Endpoint{
				{
					Hostname:  "test-host",
					IPv4s:     []string{"192.0.2.1"},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
			},
			config: Config{
				Zone: "1.0.0.2.ip6.arpa.",
			},
			expect: []PTRRecord{
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "test-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "test-host",
					AutoGeneratedHostname: false,
					FullHostname:          "test-host",
					Address:               "2001:db8::1",
					AddressKind:           AddressKindIPv6,
					DomainName:            "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
					RFC1035DomainName:     "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0",
				},
			},
		},
		"with record suffix": {
			endpoints: []*endpoint.Endpoint{
				{
					Hostname:  "test-host",
					IPv4s:     []string{"192.0.2.1"},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
			},
			config: Config{
				RecordSuffix: ".zonepop.local",
			},
			expect: []PTRRecord{
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "test-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "test-host",
					AutoGeneratedHostname: false,
					FullHostname:          "test-host.zonepop.local",
					Address:               "192.0.2.1",
					AddressKind:           AddressKindIPv4,
					DomainName:            "1.2.0.192.in-addr.arpa.",
					RFC1035DomainName:     "1.2.0.192.in-addr.arpa.",
				},
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "test-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "test-host",
					AutoGeneratedHostname: false,
					FullHostname:          "test-host.zonepop.local",
					Address:               "2001:db8::1",
					AddressKind:           AddressKindIPv6,
					DomainName:            "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
					RFC1035DomainName:     "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
				},
			},
		},
		"autogenerated hostname from IPv4": {
			endpoints: []*endpoint.Endpoint{
				{
					IPv4s:     []string{"192.0.2.1"},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
			},
			expect: []PTRRecord{
				{
					Endpoint: &endpoint.Endpoint{
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "ip-192-0-2-1",
					AutoGeneratedHostname: true,
					FullHostname:          "ip-192-0-2-1",
					Address:               "192.0.2.1",
					AddressKind:           AddressKindIPv4,
					DomainName:            "1.2.0.192.in-addr.arpa.",
					RFC1035DomainName:     "1.2.0.192.in-addr.arpa.",
				},
				{
					Endpoint: &endpoint.Endpoint{
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "ip-192-0-2-1",
					AutoGeneratedHostname: true,
					FullHostname:          "ip-192-0-2-1",
					Address:               "2001:db8::1",
					AddressKind:           AddressKindIPv6,
					DomainName:            "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
					RFC1035DomainName:     "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
				},
			},
		},
		"autogenerated hostname from IPv6": {
			endpoints: []*endpoint.Endpoint{
				{
					IPv4s:     []string{},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
			},
			expect: []PTRRecord{
				{
					Endpoint: &endpoint.Endpoint{
						IPv4s:     []string{},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "ip-2001-db8--1",
					AutoGeneratedHostname: true,
					FullHostname:          "ip-2001-db8--1",
					Address:               "2001:db8::1",
					AddressKind:           AddressKindIPv6,
					DomainName:            "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
					RFC1035DomainName:     "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
				},
			},
		},
		"dedup": {
			endpoints: []*endpoint.Endpoint{
				{
					Hostname:  "original-host",
					IPv4s:     []string{"192.0.2.1"},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
				{
					Hostname:  "duplicate-host",
					IPv4s:     []string{"192.0.2.1"},
					IPv6s:     []string{"2001:db8::1"},
					RecordTTL: 60,
				},
			},
			expect: []PTRRecord{
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "original-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "original-host",
					AutoGeneratedHostname: false,
					FullHostname:          "original-host",
					Address:               "192.0.2.1",
					AddressKind:           AddressKindIPv4,
					DomainName:            "1.2.0.192.in-addr.arpa.",
					RFC1035DomainName:     "1.2.0.192.in-addr.arpa.",
				},
				{
					Endpoint: &endpoint.Endpoint{
						Hostname:  "original-host",
						IPv4s:     []string{"192.0.2.1"},
						IPv6s:     []string{"2001:db8::1"},
						RecordTTL: 60,
					},
					Hostname:              "original-host",
					AutoGeneratedHostname: false,
					FullHostname:          "original-host",
					Address:               "2001:db8::1",
					AddressKind:           AddressKindIPv6,
					DomainName:            "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
					RFC1035DomainName:     "1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa.",
				},
			},
		},
	}

	for name, tc := range tests {
		tc := tc
		t.Run(name, func(t *testing.T) {
			t.Parallel()

			got, err := PTRsForEndpoints(tc.endpoints, tc.config)
			assert.NoError(t, err)
			assert.Equal(t, tc.expect, got)
		})
	}
}
