package rdns

import (
	"strings"

	"go.uber.org/zap"

	"github.com/sapslaj/zonepop/endpoint"
	"github.com/sapslaj/zonepop/pkg/utils"
)

type PTRRecord struct {
	// referenced Endpoint
	Endpoint *endpoint.Endpoint `json:"endpoint" gluamapper:"endpoint"`

	// Hostname from the endpoint, or auto-generated one
	Hostname string `json:"hostname" gluamapper:"hostname"`

	// was Hostname auto-generated
	AutoGeneratedHostname bool `json:"autogenerated_hostname" gluamapper:"autogenerated_hostname"`

	// Hostname with sanitization and any record suffix attached
	FullHostname string `json:"full_hostname" gluamapper:"full_hostname"`

	// IP address
	Address string `json:"address" gluamapper:"address"`

	// IPv4 or IPv6
	AddressKind AddressKind `json:"address_kind" gluamapper:"address_kind"`

	// PTR record full domain name including zone name
	DomainName string `json:"domain_name" gluamapper:"domain_name"`

	// PTR record but in an RFC 1035 zone file correct form (if Zone was
	// configured)
	RFC1035DomainName string `json:"rfc1035_domain_name" gluamapper:"rfc1035_domain_name"`
}

type Config struct {
	// if provided will only return records that fit in the zone
	Zone string

	RecordSuffix string

	Logger *zap.Logger
}

func RFC1035DomainName(ptr string, zone string) string {
	if !strings.HasSuffix(zone, ".") {
		zone += "."
	}
	rfc1035DomainName := strings.TrimSuffix(ptr, zone)
	rfc1035DomainName = strings.TrimSuffix(rfc1035DomainName, ".")
	if rfc1035DomainName == "" {
		rfc1035DomainName = "@"
	}
	return rfc1035DomainName
}

func PTRsForEndpoints(endpoints []*endpoint.Endpoint, c Config) ([]PTRRecord, error) {
	logger := c.Logger
	if logger == nil {
		logger = zap.NewNop()
	}
	logger = logger.With()

	if c.RecordSuffix != "" {
		logger = logger.With(
			zap.String("record_suffix", c.RecordSuffix),
		)
	}

	if c.Zone != "" {
		logger = logger.With(zap.String("zone", c.Zone))
	}

	ptrRecords := []PTRRecord{}
	seenHostnames := map[string]string{}

	for _, e := range endpoints {
		for _, ipv4 := range e.IPv4s {
			addrKind := AddressKindIPv4
			addrLogger := logger.With(
				zap.String("address", ipv4),
				zap.String("address_kind", string(addrKind)),
			)

			autogeneratedHostname := false
			hostname := e.Hostname
			if hostname == "" {
				autogeneratedHostname = true
				hostname = "ip-" + strings.ReplaceAll(e.IPv4s[0], ".", "-")
				addrLogger.Sugar().
					With("autogenerated_hostname", true).
					Infof("No hostname defined for endpoint, using generated hostname of %s", hostname)
			}
			fullHostname := utils.DNSSafeName(hostname) + c.RecordSuffix

			if c.Zone != "" {
				fits, err := FitsInReverseZone(ipv4, c.Zone)
				if err != nil {
					addrLogger.Error(
						"could not determine if address fits in reverse zone",
						zap.Error(err),
					)
					return ptrRecords, err
				}
				if !fits {
					addrLogger.Sugar().Warnf("IPv4 %q does not fit in zone %q", ipv4, c.Zone)
					continue
				}
			}

			ptr, err := ReverseAddr(ipv4)
			if err != nil {
				addrLogger.Error("could not determine PTR record", zap.Error(err))
				return ptrRecords, err
			}
			addrLogger = addrLogger.With(zap.String("ptr", ptr))

			if existingHostname, seen := seenHostnames[ptr]; seen {
				addrLogger.Sugar().Warnf("already registered PTR %q with hostname %q", ptr, existingHostname)
				continue
			}
			seenHostnames[ptr] = fullHostname

			rfc1035DomainName := ptr
			if c.Zone != "" {
				rfc1035DomainName = RFC1035DomainName(ptr, c.Zone)
			}

			ptrRecords = append(ptrRecords, PTRRecord{
				Endpoint:              e,
				Hostname:              hostname,
				AutoGeneratedHostname: autogeneratedHostname,
				FullHostname:          fullHostname,
				Address:               ipv4,
				AddressKind:           addrKind,
				DomainName:            ptr,
				RFC1035DomainName:     rfc1035DomainName,
			})

			addrLogger.Sugar().Infof("adding IPv4 PTR record %q for hostname %q", ptr, hostname)
		}

		for _, ipv6 := range e.IPv6s {
			addrKind := AddressKindIPv6
			addrLogger := logger.With(
				zap.String("address", ipv6),
				zap.String("address_kind", string(addrKind)),
			)

			autogeneratedHostname := false
			hostname := e.Hostname
			if hostname == "" {
				autogeneratedHostname = true
				if len(e.IPv4s) > 0 {
					hostname = "ip-" + strings.ReplaceAll(e.IPv4s[0], ".", "-")
				} else {
					hostname = "ip-" + strings.ReplaceAll(ipv6, ":", "-")
				}
				addrLogger.Sugar().
					With("autogenerated_hostname", true).
					Infof("No hostname defined for endpoint, using generated hostname of %s", hostname)
			}

			fullHostname := ""
			if hostname != "" {
				fullHostname = utils.DNSSafeName(hostname) + c.RecordSuffix
			}

			addrLogger = logger.With(
				zap.String("hostname", hostname),
				zap.String("full_hostname", fullHostname),
				zap.Bool("autogenerated_hostname", autogeneratedHostname),
			)

			if c.Zone != "" {
				fits, err := FitsInReverseZone(ipv6, c.Zone)
				if err != nil {
					addrLogger.Error(
						"could not determine if address fits in reverse zone",
						zap.Error(err),
					)
					return ptrRecords, err
				}
				if !fits {
					addrLogger.Sugar().Warnf("IPv6 %q does not fit in zone %q", ipv6, c.Zone)
					continue
				}
			}

			ptr, err := ReverseAddr(ipv6)
			if err != nil {
				addrLogger.Error("could not determine PTR record", zap.Error(err))
				return ptrRecords, err
			}
			addrLogger = addrLogger.With(zap.String("ptr", ptr))

			if existingHostname, seen := seenHostnames[ptr]; seen {
				addrLogger.Sugar().Warnf("already registered PTR %q with hostname %q", ptr, existingHostname)
				continue
			}
			seenHostnames[ptr] = fullHostname

			rfc1035DomainName := ptr
			if c.Zone != "" {
				rfc1035DomainName = RFC1035DomainName(ptr, c.Zone)
			}

			ptrRecords = append(ptrRecords, PTRRecord{
				Endpoint:              e,
				Hostname:              hostname,
				AutoGeneratedHostname: autogeneratedHostname,
				FullHostname:          fullHostname,
				Address:               ipv6,
				AddressKind:           addrKind,
				DomainName:            ptr,
				RFC1035DomainName:     rfc1035DomainName,
			})

			addrLogger.Sugar().Infof("adding IPv6 PTR record %q for hostname %q", ptr, hostname)
		}
	}

	return ptrRecords, nil
}
